<?xml version="1.0" encoding="UTF-8"?>
<project name="billing-ng-core" default="dist" basedir=".">

    <!-- properties -->
    <property name="root.dir" location=".."/>
    <property file="${root.dir}/build.properties"/>

    <property name="jar.dir" value="${build.dir}/${ant.project.name}.jar"/>
    <property name="classes.dir" value="${jar.dir}/"/>


    <!-- paths -->
    <path id="compile.classpath">
    	<fileset dir="${j2ee5.dir}" includes="*.jar"/>
        <fileset dir="${j2ee5client.dir}" includes="*.jar"/>
        <fileset dir="${commons-codec.dir}" includes="*.jar"/>
        <fileset dir="${joda-time.dir}" includes="*.jar"/>
    </path>

    <path id="testng.classpath">
        <path refid="compile.classpath"/>
        <fileset dir="${testng.dir}" includes="testng-*.jar"/>
        <fileset dir="${hamcrest.dir}" includes="hamcrest-all-*.jar"/>
        <pathelement path="${classes.dir}"/>
    </path>

    <path id="test.classpath">
        <pathelement path="${classes.dir}"/>
        <pathelement path="${test-build.dir}"/>
        <path refid="testng.classpath"/>
    </path>

    <path id="liquibase.classpath">
        <fileset dir="${liquibase.dir}" includes="liquibase.jar"/>
        <fileset dir="${liquibase.dir}/lib" includes="**/*.jar"/>
        <fileset dir="${mysql-connector.dir}" includes="*.jar"/>
        <path refid="compile.classpath"/>
    </path>

    <path id="hibernate.classpath">
        <fileset dir="${hibernate-tools.dir}" includes="**/*.jar"/>
        <path refid="compile.classpath"/>
    </path>    

    <path id="xjc.classpath">
        <fileset dir="${jaxb.dir}/lib/" includes="*.jar"/>
    </path>

    <path id="checkstyle.classpath">
        <fileset dir="${checkstyle.dir}" includes="checkstyle-all-*.jar"/>
    </path>


    <!-- targets -->
    <target  name="reformat-text" description="Cleans up text files and sets the appropriate EOL character.">
        <fixcrlf srcdir="${src.dir}/main/java" includes="**/*.java"
                 tab="remove" tablength="4" javafiles="yes"
                 eol="unix"/>
    </target>
    
    <target name="checkstyle" depends="init" description="Run code style checks on all java classes.">
        <delete dir="${checkstyle-results.dir}"/>
        <mkdir dir="${checkstyle-results.dir}/raw"/>
        <mkdir dir="${checkstyle-results.dir}/html"/>

        <checkstyle config="${root.dir}/checks.xml" failureproperty="checkstyle.failure" failonviolation="false">
            <fileset dir="${src.dir}/main/java" includes="**/*.java" excludes="**/package-info.java"/>
            <formatter type="plain"/>
            <formatter type="xml" tofile="${checkstyle-results.dir}/raw/checkstyle_report.xml"/>
        </checkstyle>

        <xslt in="${checkstyle-results.dir}/raw/checkstyle_report.xml"
              out="${checkstyle-results.dir}/html/checkstyle_report.html"
              style="${checkstyle.dir}/contrib/checkstyle-noframes-severity-sorted.xsl"/>

        <fail if="checkstyle.failure" message="${ant.project.name} style checks failed, see checkstyle reports for details."/>
    </target>


    <!--
        testing targets
    -->
    <target name="test.all" depends="compile.tests" description="Run all tests.">
        <testng suitename="${ant.project.name} unit test suite"
                testname="${ant.project.name} test.all "
                classpathref="test.classpath"
                outputDir="${test-results.dir}/testng/"
                failureProperty="test.failure"
                verbose="${testng.verbose}">

            <classfileset dir="${test-build.dir}">
                <include name="**/*Test*.class"/>
                <exclude name="**/*Tester*.class"/>
            </classfileset>                       
        </testng>

        <antcall target="test.reports"/>       
    </target>

    <target name="test.groups" depends="compile.tests" if="test.groups" description="Run a specific test configuration set by -Dtest.groups">
        <testng suitename="${ant.project.name} unit test suite"
                testname="${ant.project.name} '${test.groups}' test.groups "
                groups="${test.groups}"
                classpathref="test.classpath"
                outputDir="${test-results.dir}/testng/"
                failureProperty="test.failure"
                verbose="${testng.verbose}">

            <classfileset dir="${test-build.dir}">
                <include name="**/*Test*.class"/>
                <exclude name="**/*Tester*.class"/>
            </classfileset>
        </testng>        

        <antcall target="test.reports"/>
    </target>

    <target name="test.failed" depends="init" description="Re-run all previously failed tests.">
        <property name="build.noclean" value="true"/>
        <antcall target="compile.tests"/>

        <testng classpathref="test.classpath"
                outputDir="${test-results.dir}/testng/"
                failureProperty="test.failure"
                verbose="${testng.verbose}">

            <xmlfileset dir="${test-results.dir}/testng/" includes="testng-failed.xml"/>
        </testng>

        <antcall target="test.reports"/>
    </target>

    <target name="test.reports" unless="test.noreport">
        <junitreport todir="${test-results.dir}">
            <fileset dir="${test-results.dir}/testng/">
                <include name="*/*.xml"/>
            </fileset>
            <report format="noframes"  todir="${test-results.dir}/pretty"/>
        </junitreport>
        <fail if="test.failure" message="${ant.project.name} tests failed, see testing reports for details."/>
    </target>

    <target name="compile.tests" depends="compile">
        <mkdir dir="${test-build.dir}"/>
        <mkdir dir="${test-results.dir}/testng"/>
        <mkdir dir="${test-results.dir}/pretty"/>

        <javac srcdir="${src.dir}/test"
               destdir="${test-build.dir}"
               classpathref="testng.classpath"
               source="${javac.source}"
               target="${javac.target}"
               debug="${javac.debug}" fork="${javac.fork}" deprecation="${javac.deprecation}" nowarn="${javac.nowarn}">
        </javac>
    </target>


    <!--
        schema generation targets
    -->
    <target name="generate.xsd"
            depends="compile"
            description="Generate .xsd XML schema descriptors for JAXB bound entities.">

        <schemagen classpathref="compile.classpath"
                   srcdir="${src.dir}/main/java"
                   destdir="${build.dir}"
                   includes="**/entities/*.java"
                   excludes="**/*Adapter.java">
            <schema namespace="http://billing-ng.com/entities" file="core-entities.xsd"/>
        </schemagen>
    </target>

    <target name="generate.ddl"
            depends="compile, set-ddl-drop.property"
            description="Generate the schema creation .sql file from hibernate entity classes. The property 'ddl.drop' can be set add schema drop statements to the generated ddl file.">

        <property name="ddl-sql.file" value="objectmodel.ddl.sql"/>
        <hibernatetool destdir="${build.dir}">
            <annotationconfiguration configurationfile="${src.dir}/main/resources/hibernate.cfg.xml"
                                     namingStrategy="org.hibernate.cfg.ImprovedNamingStrategy"/>

            <classpath path="${classes.dir}"/>
            <hbm2ddl outputfilename="${ddl-sql.file}" export="false" drop="${ddl.drop}" format="true"/>
        </hibernatetool>
        <echo message="Generated ddl ${build.dir}/${ddl-sql.file} with ddl.drop = ${ddl.drop}"/>
    </target>

    <target name="generate.changelog"
            description="Generates a liquibase changelog that can be used to re-create an existing database schema."
            depends="init, prompt-db.properties, set-db.properties">
        <generateChangeLog outputFile="${db.changelog.file}"
                           driver="${db.driver}"
                           url="${db.url}"
                           username="${db.username}"
                           password="${db.password}"
                           databasechangelogtablename="${db.changelog.tablename}"
                           databasechangeloglocktablename="${db.changelog.lock-tablename}"
                           promptonnonlocaldatabase="${db.prompt.nonlocal}"
                           classpathref="liquibase.classpath"/>
        <echo message="Generated changelog ${db.changelog.releasefile}"/>
    </target>    

    <target name="db.update"
            description="Updates the database to the most recent version."
            depends="init, prompt-db.properties, set-db.properties">
        <input message="Drop schema before updating?" addproperty="db.drop" defaultvalue="false"/>
        <updateDatabase changeLogFile="${db.changelog.file}"
                        driver="${db.driver}"
                        url="${db.url}"
                        username="${db.username}"
                        password="${db.password}"
                        databasechangelogtablename="${db.changelog.tablename}"
                        databasechangeloglocktablename="${db.changelog.lock-tablename}"
                        promptOnNonLocalDatabase="${db.prompt.nonlocal}"
                        dropFirst="${db.drop}"
                        classpathref="liquibase.classpath"/>
        <echo message="Updated database to the most recent version with db.drop = ${db.drop}"/>
    </target>

    <target name="db.rollback"
            description="Rollback the database to the given version tag."
            depends="init, prompt-db.properties, set-db.properties">
        <input message="Rollback to tag" addproperty="db.rollback.tag" defaultvalue="${release.version}"/>
        <rollbackDatabase changeLogFile="${db.changelog.file}"
                          driver="${db.driver}"
                          url="${db.url}"
                          username="${db.username}"
                          password="${db.password}"
                          databasechangelogtablename="${db.changelog.tablename}"
                          databasechangeloglocktablename="${db.changelog.lock-tablename}"
                          promptonnonlocaldatabase="${db.prompt.nonlocal}"
                          rollbackTag="${db.rollback.tag}"
                          classpathref="liquibase.classpath"/>
        <echo message="Rolled back database to version '${db.rollback.tag}'"/>
    </target>

    <target name="db.tag"
            description="Tags the database with a version tag for future rollbacks/upgrades."
            depends="init, prompt-db.properties, set-db.properties">
        <input message="Tag database as version" addproperty="db.tag" defaultvalue="${release.version}"/>
        <tagDatabase driver="${db.driver}"
                     url="${db.url}"
                     username="${db.username}"
                     password="${db.password}"
                     databasechangelogtablename="${db.changelog.tablename}"
                     databasechangeloglocktablename="${db.changelog.lock-tablename}"
                     promptonnonlocaldatabase="${db.prompt.nonlocal}"
                     tag="${db.tag}"
                     classpathref="liquibase.classpath"/>
        <echo message="Tagged database as version '${db.tag}'"/>
    </target>

    <target name="prompt-db.properties" unless="db.noprompt">
        <input message="Database URL" addproperty="db.url" defaultvalue="${db.default.url}"/>
        <input message="Database username" addproperty="db.username" defaultvalue="${db.default.username}"/>
        <input message="Database password" addproperty="db.password" defaultvalue="${db.default.password}"/>
        <input message="Database driver" addproperty="db.driver" defaultvalue="${db.default.driver}"/>
    </target>    

    <target name="set-db.properties" unless="db.url, db.username, db.password, db.driver">
        <property name="db.url" value="${db.default.url}"/>
        <property name="db.username" value="${db.default.username}"/>
        <property name="db.password" value="${db.default.password}"/>
        <property name="db.driver" value="${db.default.driver}"/>
        
        <echo message="Using database config: ${db.url} ${db.username}/${db.password} (driver ${db.driver})"/>
    </target>

    <target name="set-ddl-drop.property" unless="ddl.drop">
        <property name="ddl.drop" value="false"/>
    </target>


    <!--
        build targets    
    -->
    <target name="dist"
            depends="build, generate.ddl, generate.xsd, svn.revision"
            description="Build and package as a distributable .jar file and generate all schema artifacts.">

        <mkdir dir="${dist.dir}" />

        <!-- package the jar -->
        <tstamp/>
        <jar destfile="${dist.dir}/${ant.project.name}.jar" basedir="${jar.dir}">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-On" value="${DSTAMP}-${TSTAMP}"/>
                <attribute name="Specification-Title" value="BillingNG Core Classes"/>
                <attribute name="Specification-Version" value="${release.version}"/>
                <attribute name="Specification-Vendor" value="Pointyspoon.com"/>

                <attribute name="Package-Title" value="${ant.project.name}"/>
                <attribute name="Package-Version" value="${svn.revision}"/>
                <attribute name="Package-Vendor" value="Pointyspoon.com"/>
            </manifest>
        </jar>

        <!-- copy database change-logs, ddl and xml schema files -->
        <copy todir="${dist.dir}">
            <fileset dir="${build.dir}" includes="*.sql"/>
            <fileset dir="${build.dir}" includes="*.xsd"/>
            <fileset dir="${src.dir}/main/resources/" includes="changelog*.xml"/>
        </copy>
    </target>

    <target name="svn.revision" unless="svn.revision">
        <exec executable="svnversion" outputproperty="svn.revision">
            <arg value="."/>
        </exec>
        <echo message="Revision ${svn.revision}"/>
    </target>

    <target name="build" depends="compile" description="Build the exploded .jar for packaging.">
        <mkdir dir="${build.dir}"/>
        <copy todir="${jar.dir}">
            <fileset dir="${src.dir}/main/resources" excludes="hibernate.cfg.xml"/>
        </copy>
    </target>

    <target name="compile" depends="clean, init" unless="build.compiled">
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${src.dir}/main"
               destdir="${classes.dir}"
               classpathref="compile.classpath"
               source="${javac.source}"
               target="${javac.target}"
               debug="${javac.debug}" fork="${javac.fork}" deprecation="${javac.deprecation}" nowarn="${javac.nowarn}">
        </javac>

        <copy todir="${classes.dir}">
            <fileset dir="${src.dir}/main/java" includes="**/*.index"/>
        </copy>

        <property name="build.compiled" value="true"/> <!-- compile once per session -->
        <property name="build.noclean" value="true"/> <!-- clean once per session -->                
    </target>

    <target name="init">
        <!-- task definitions -->
        <taskdef resource="testngtasks" classpathref="testng.classpath"/>
        <taskdef resource="checkstyletask.properties" classpathref="checkstyle.classpath"/>
        <taskdef resource="liquibasetasks.properties" classpathref="liquibase.classpath"/>
        <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="hibernate.classpath"/>
        <taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask" classpathref="xjc.classpath"/>
    </target>

    <target name="clean" description="Remove old build artifacts and temp files." unless="build.noclean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${test-build.dir}"/>
        <delete dir="${test-results.dir}"/>
        <delete dir="${checkstyle-results.dir}"/>
    </target>
</project>
