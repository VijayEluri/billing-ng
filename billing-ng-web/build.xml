<?xml version="1.0" encoding="UTF-8"?>
<project name="billing-ng-web" default="dist" basedir=".">

    <!-- properties -->
    <property name="root.dir" location=".."/>
    <property file="${root.dir}/build.properties"/>

    <property name="war.dir" value="${build.dir}/${ant.project.name}.war" />
    <property name="classes.dir" value="${war.dir}/WEB-INF/classes"/>

    <available file="${lib.dir}" type="dir" property="ivy.resolved"/>  
	
    <import file="${root.dir}/common.xml"/>
    <property file="${root.dir}/ivysettings.properties"/>

	
    <!-- paths -->
    <path id="compile.classpath">
        <fileset dir="${lib.dir}/compile" includes="*.jar"/>
        <fileset dir="${lib.common.dir}/compile" includes="*.jar"/>
        <fileset dir="${lib.common.dir}/provided" includes="*.jar"/>
    </path>

    <path id="compile.test.classpath">
        <pathelement path="${classes.dir}"/>
        <path refid="compile.classpath"/>
        <fileset dir="${lib.common.dir}/test" includes="*.jar"/>
    </path>

    <path id="test.classpath">
        <pathelement path="${test-build.dir}"/>
        <path refid="compile.test.classpath"/>
    </path>


    <!-- targets -->
    <target name="dist" depends="build, git.revision" description="Build and package as a distributable .war file.">
        <mkdir dir="${dist.dir}" />

        <!-- package the war -->
        <tstamp/>
        <war warfile="${dist.dir}/${ant.project.name}.war" basedir="${war.dir}" manifest="${src.dir}/main/resources/META-INF/MANIFEST.MF">
            <manifest>
                <attribute name="Built-By" value="${user.name}"/>
                <attribute name="Built-On" value="${DSTAMP}-${TSTAMP}"/>
                <attribute name="Specification-Title" value="BillingNG Web Application"/>
                <attribute name="Specification-Version" value="${revision}"/>
                <attribute name="Specification-Vendor" value="billing-ng.com"/>

                <attribute name="Package-Title" value="${ant.project.name}"/>
                <attribute name="Package-Version" value="${git.tag} (commit: ${git.revision})"/>
                <attribute name="Package-Vendor" value="billing-ng.com"/>
            </manifest>
        </war>
    </target>        

    <target name="build" depends="compile" description="Build the exploded .war for packaging.">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${war.dir}"/>

        <copy todir="${war.dir}/WEB-INF/classes">
            <fileset dir="${src.dir}/main/resources">
                <include name="struts*.xml" />
                <include name="*.properties"/>
            </fileset>
         </copy>

        <copy todir="${war.dir}">
            <fileset dir="${src.dir}/main/webapp" />
        </copy>

        <copy todir="${war.dir}/WEB-INF">
            <fileset dir="${src.dir}/main/resources/WEB-INF">
                <include name="*.*"/>
            </fileset>
        </copy>

        <copy todir="${war.dir}/WEB-INF/lib">
            <fileset dir="${lib.dir}/compile" includes="*.jar"/>
        </copy>
    </target>

    <target name="compile" depends="clean, ivy.resolve-once, build.dependencies">
        <mkdir dir="${classes.dir}" />
        <javac srcdir="${src.dir}/main/java"
               destdir="${classes.dir}"
               classpathref="compile.classpath"
               includeantruntime="false"
               source="${javac.source}"
               target="${javac.target}"
               debug="${javac.debug}" fork="${javac.fork}" deprecation="${javac.deprecation}" nowarn="${javac.nowarn}">

            <classpath>
                <!-- dependencies that may or may not exist at launch - prevents errors in the compile.classpath -->
                <fileset dir="${billing-ng-core.dist}" includes="*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="build.dependencies" unless="dependencies.present" depends="check.dependencies">
        <ant dir="${billing-ng-core.dir}" target="dist" inheritall="false" inheritrefs="false"/>
    </target>

    <target name="check.dependencies">
        <condition property="dependencies.present">
            <and>
                <!-- the build.dependencies task will be run if any of the following are missing -->
                <available file="${billing-ng-core.dist}/billing-ng-core.jar"/>
            </and>
        </condition>
    </target>

    <target name="clean" description="Remove old build artifacts and temp files." unless="build.noclean">
        <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
    </target>
	
	<target name="ivy.resolve-once" unless="ivy.resolved">
		<antcall target="ivy.resolve"/>
	</target>	
	

    <!--
        testing targets
    -->
    <target name="test.all" depends="compile.tests, init.testng" description="Run all tests.">
        <testng suitename="${ant.project.name} unit test suite"
                testname="${ant.project.name} test.all "
                classpathref="test.classpath"
                outputDir="${test-results.dir}/testng/"
                failureProperty="test.failure"
                verbose="${testng.verbose}">

            <classfileset dir="${test-build.dir}">
                <include name="**/*Test*.class"/>
                <exclude name="**/*Tester*.class"/>
            </classfileset>                       
        </testng>

        <antcall target="test.reports"/>       
    </target>

    <target name="test.groups" depends="compile.tests, init.testng" if="groups" description="Run a specific test configuration set by -Dgroups">
        <testng suitename="${ant.project.name} unit test suite"
                testname="${ant.project.name} '${groups}' groups "
                groups="${groups}"
                classpathref="test.classpath"
                outputDir="${test-results.dir}/testng/"
                failureProperty="test.failure"
                verbose="${testng.verbose}">

            <classfileset dir="${test-build.dir}">
                <include name="**/*Test*.class"/>
                <exclude name="**/*Tester*.class"/>
            </classfileset>
        </testng>        

        <antcall target="test.reports"/>
    </target>

    <target name="test.failed" depends="init.testng" description="Re-run all previously failed tests.">
        <property name="build.noclean" value="true"/>
        <antcall target="compile.tests"/>

        <testng classpathref="test.classpath"
                outputDir="${test-results.dir}/testng/"
                failureProperty="test.failure"
                verbose="${testng.verbose}">

            <xmlfileset dir="${test-results.dir}/testng/" includes="testng-failed.xml"/>
        </testng>

        <antcall target="test.reports"/>
    </target>

    <target name="test.reports" unless="test.noreport">
        <junitreport todir="${test-results.dir}">
            <fileset dir="${test-results.dir}/testng/">
                <include name="*/*.xml"/>
            </fileset>
            <report format="noframes"  todir="${test-results.dir}/pretty"/>
        </junitreport>
        <fail if="test.failure" message="${ant.project.name} tests failed, see testing reports for details."/>
    </target>

    <target name="compile.tests" depends="compile">
        <mkdir dir="${test-build.dir}"/>
        <mkdir dir="${test-results.dir}/testng"/>
        <mkdir dir="${test-results.dir}/pretty"/>

        <javac srcdir="${src.dir}/test"
               destdir="${test-build.dir}"
               classpathref="compile.test.classpath"
               source="${javac.source}"
               target="${javac.target}"
               includeantruntime="false"
               debug="${javac.debug}" fork="${javac.fork}" deprecation="${javac.deprecation}" nowarn="${javac.nowarn}">
        </javac>
    </target>

    <target name="init.testng">
        <taskdef resource="testngtasks" classpathref="compile.test.classpath"/>
    </target>	


    <!--
        Overriden targets
    -->
    <target name="ivy.publish">
        <echo message="nothing to publish for ${ant.project.name}"/>
    </target>
</project>
